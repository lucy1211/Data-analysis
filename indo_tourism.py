# -*- coding: utf-8 -*-
"""Indo_tourism.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OAQ678io6VwOvlZtkM9E6sKbgXnNhQyw
"""

from google.colab import files
zip_file = files.upload()

!unzip archive.zip

import pandas as pd 
import numpy as np
from sklearn.impute import KNNImputer
from matplotlib import pyplot as plt 
import plotly.express as px

## importing data sets
pkg_tour= pd.read_csv('package_tourism.csv')
rating = pd.read_csv('tourism_rating.csv')
tour_id = pd.read_csv('tourism_with_id.csv')
user = pd.read_csv('user.csv')

"""Data cleaning"""

## tour_id

print('There are {0} places priced 0'.format(sum(tour_id['Price']==0)))
### question: those places are literally free to visit or zero-values are caused by human when data input
print('There are {0} missing values of length of tour'.format(sum(np.isnan(tour_id['Time_Minutes'].values))))

## dropping unimportant columns

tour_id = tour_id.drop(['Description','Coordinate', 'Lat', 'Long','Unnamed: 11', 'Unnamed: 12'], axis =1)

tour_id.head()

### imputing the missing values of time by the mean time of visiting each category of place in individual city
cat_city = pd.DataFrame(tour_id.groupby(['City', 'Category']).Time_Minutes.mean())
cat_city=cat_city.rename(columns={'Time_Minutes': 'Mean_time'})

cat_time = pd.DataFrame(tour_id.groupby(['Category']).Time_Minutes.mean())

## extract df of nan time values
tour_nan = tour_id[tour_id['Time_Minutes'].isnull()==1]
tour_nan_2=tour_nan.reset_index().set_index(['City', 'Category'])
imputed= tour_nan_2.join(cat_city, how='left').reset_index()

## updating tour_id
tour_id2=tour_id.copy()
for i in imputed['index'].values.tolist():

 tour_id2.iloc[i,6]= imputed[imputed['index']==i].Mean_time.values

## the remaining missing values will be imputed by using mean time of each category considering all cities
imputed2=cat_time.join(tour_id[tour_id2.Time_Minutes.isnull()].reset_index().set_index('Category'), how='right', rsuffix='x_')
for i in imputed2['index'].values.tolist():

 tour_id2.iloc[i,6]= imputed2[imputed2['index']==i].Time_Minutes.values

## dropping the remaning nan
tour_test = tour_id2.dropna(axis=0, subset=['Time_Minutes'])
tour_test.head(3)

## joining tou_with_id with tourism_rating


place_rate= tour_test.set_index('Place_Id').join(rating.set_index('Place_Id'))
place_rate= place_rate.rename(columns={'Place_Ratings': 'user_ratings'})
place_rate=place_rate.reset_index()
place_rate.head(3)



def pkg_index(name,method):
  pkg_index=[]
  for i in range(0,pkg_tour.shape[0]):
    index_list=[]
  #pkg_names = list(pkg_tour.iloc[i,:][2:])
  #prices = [place_rate['Price'][place_rate['Place_Name']==pkg_name for pkg_name in 
    for j in np.arange(2,pkg_tour.shape[1],1):
      if pd.isnull(pkg_tour.iloc[i,j]) == False:
        index_val = tour_test[name][tour_test['Place_Name']==pkg_tour.iloc[i,j]].values
        if index_val.size==0 or pd.isnull(index_val)==True:
          index_list.append(0)
        else:
          index_list.append(index_val[0])
    pkg_index.append(method(index_list))
  return pkg_index

pkg_price  = pkg_index('Price', sum)
pkg_time = pkg_index('Time_Minutes',sum)
pkg_rating = pkg_index('Rating',np.mean)

pkg_tour['Total_price']=pkg_price
pkg_tour['Total_time'] = pkg_time
pkg_tour['avg_rating'] = np.round(pkg_rating,1)
pkg_tour.head()

## drop rows where total_time ==0 in pkg_tour
pkg_tour_test = pkg_tour[pkg_tour.Total_time !=0]

"""df: user, pkg_tour_test, tour_test, place_rate(join tour_test & rating)"""

rating

"""EDA"""

Avg_Pr_R= tour_test.groupby(['City','Category']).agg({'Price':np.mean, 'Rating': np.mean})
df_avg_PR = pd.DataFrame(Avg_Pr_R).reset_index()
df_avg_PR.head(n=3)

## plotting 
import seaborn as sns
sns.set_style('whitegrid')

sns.catplot(
    data = df_avg_PR, kind='bar',
    x='City',
    y= 'Rating',
    hue='Category',
    palette='deep',
    alpha=0.9,
    height= 5,
    aspect = 10/5
)
sns.catplot(
    data = df_avg_PR, kind='bar',
    x='City',
    y= 'Price',
    hue='Category',
    palette='deep',
    alpha=0.9,
    height= 5,
    aspect = 10/5

)

## the most popular place 
no_visitors=pd.DataFrame(rating.groupby('Place_Id').User_Id.count().sort_values()).reset_index()
pop_place = no_visitors['Place_Id'][no_visitors.User_Id==np.max(no_visitors.User_Id.values)].values.tolist()

for i in pop_place:

  print(tour_test.Place_Name[tour_test.Place_Id==i].values[0])

pla_per_user= pd.DataFrame(rating.groupby('User_Id').Place_Id.count().sort_values()).reset_index()
pla_per_user=pla_per_user.rename(columns={'Place_Id':"no_places"})
user_place = pla_per_user.merge(user, how ='inner', left_on='User_Id', right_on='User_Id')

user_place['age_cat']=pd.cut(age,3, labels=['pre-adult(18-25)', 'middle-adult(25-32)', 'late-adult(above 32)']).values
user_inf=user_place.merge(rating,how='right', left_on='User_Id', right_on='User_Id')
user_inf[['Birth_city', 'Area']] = (user_inf['Location'].str.split(", ", expand=True))
user_inf=user_inf.drop('Location', axis=1)
## average no of places visited by each age group
avg_pla=user_inf.groupby('age_cat').no_places.mean()

user_tour=user_inf.merge(tour_test, how='left', left_on='Place_Id', right_on='Place_Id')
user_prefer=pd.DataFrame(user_tour.groupby(['age_cat', 'Category','City']).agg(cat_turn= pd.NamedAgg(column='Category', aggfunc='count'))).reset_index()
agecat_list = user_prefer.age_cat.unique()

def turn_plot(agecat):
  df_cat= user_prefer[user_prefer.age_cat==agecat]
  fig = px.bar(df_cat,x='Category', y='cat_turn', color='City', labels={'cat_turn':'number of visitors'},
  title ="Number of visitors in {0} age visit each category of tourisim".format(agecat))

  fig.show()

for i in range(len(agecat_list)):
 turn_plot(agecat_list[i])

user_tour.head(3)